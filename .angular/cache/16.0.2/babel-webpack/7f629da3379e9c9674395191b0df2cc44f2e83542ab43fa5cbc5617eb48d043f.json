{"ast":null,"code":"import { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ProduitService {\n  constructor(http) {\n    this.http = http;\n    this.produitsList = [];\n  }\n  getAllProduits() {\n    return this.http.get('https://diane.amorce.org/api/produits');\n  }\n  getAllPhotoByRef(ref) {\n    const url = `https://diane.amorce.org/api/photos?RefProduit=${ref}`;\n    return this.http.get(url);\n  }\n  getProduitById(id) {\n    const url = `https://diane.amorce.org/api/produits?id=${id}`;\n    return this.http.get(url);\n  }\n  createProduit(formData, currentCategoryId) {\n    const url = 'https://diane.amorce.org/api/produits';\n    const nbrId = this.getAllProduits.length - 1;\n    // Effectuez les modifications nécessaires sur formData ici\n    const modifiedData = {\n      // Exemple : ne conservez que les propriétés nécessaires\n      ShortLibel: formData.ShortLibel,\n      slug: this.slugify(formData.ShortLibel),\n      LongLibel: formData.LongLibel,\n      prxHt: formData.prxHt,\n      categorie: currentCategoryId,\n      id: nbrId + 1,\n      photos: formData.photos0\n    };\n    // Créez un nouvel observable à partir du tableau modifié\n    const productInfos = of(modifiedData);\n    return productInfos;\n  }\n  slugify(text) {\n    const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\n    const slug = normalizedText.replace(/\\s+/g, \"-\");\n    return slug;\n  }\n}\nProduitService.ɵfac = function ProduitService_Factory(t) {\n  return new (t || ProduitService)(i0.ɵɵinject(i1.HttpClient));\n};\nProduitService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProduitService,\n  factory: ProduitService.ɵfac,\n  providedIn: 'root'\n});\nexport { ProduitService };","map":{"version":3,"names":["of","ProduitService","constructor","http","produitsList","getAllProduits","get","getAllPhotoByRef","ref","url","getProduitById","id","createProduit","formData","currentCategoryId","nbrId","length","modifiedData","ShortLibel","slug","slugify","LongLibel","prxHt","categorie","photos","photos0","productInfos","text","normalizedText","replace","toLowerCase","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Maddox\\Documents\\TRAVAIL\\AFPA_CDA_2023\\ANGULAR\\WitchyDesktop\\src\\app\\services\\produits.services.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable, forkJoin, map, of } from \"rxjs\";\r\nimport { Produits } from \"../models/produits.model\";\r\nimport { Photos } from \"../models/photos.model\";\r\n\r\n\r\ninterface FormData {\r\n    ShortLibel: string;\r\n    LongLibel: string;\r\n    prxHt: number;\r\n    photos0: any[];\r\n    categorie: string\r\n    // Ajoutez les autres propriétés du formulaire ici\r\n  }\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class ProduitService {\r\n\r\n    constructor( private http: HttpClient){\r\n\r\n    }\r\n\r\n    produitsList: Produits[] = [\r\n    ];\r\n\r\n    getAllProduits():Observable<Produits[]> {\r\n        return this.http.get<Produits[]>('https://diane.amorce.org/api/produits')\r\n    }\r\n\r\n    getAllPhotoByRef(ref: number): Observable<Photos[]>{\r\n        const url = `https://diane.amorce.org/api/photos?RefProduit=${ref}`;\r\n        return this.http.get<Photos[]>(url);\r\n    }\r\n\r\n    getProduitById(id:number): Observable<Produits[]>{\r\n        const url= `https://diane.amorce.org/api/produits?id=${id}`;\r\n        return this.http.get<Produits[]>(url);\r\n    }\r\n\r\n    createProduit(formData: FormData, currentCategoryId: number | null): Observable<Produits> {\r\n        const url = 'https://diane.amorce.org/api/produits';\r\n        const nbrId = this.getAllProduits.length -1\r\n   \r\n         // Effectuez les modifications nécessaires sur formData ici\r\n  const modifiedData = {\r\n    // Exemple : ne conservez que les propriétés nécessaires\r\n    ShortLibel: formData.ShortLibel,\r\n    slug : this.slugify(formData.ShortLibel),\r\n    LongLibel: formData.LongLibel,\r\n    prxHt: formData.prxHt,\r\n    categorie: currentCategoryId,\r\n    id:nbrId+1,\r\n    photos:formData.photos0\r\n  };\r\n\r\n  // Créez un nouvel observable à partir du tableau modifié\r\n  const productInfos = of(modifiedData);\r\n\r\n  return productInfos;\r\n} \r\n\r\nslugify(text: string): string {\r\n        const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\r\n        const slug = normalizedText.replace(/\\s+/g, \"-\");\r\n      \r\n        return slug;\r\n      }\r\n      \r\n    }\r\n   \r\n"],"mappings":"AAEA,SAAoCA,EAAE,QAAQ,MAAM;;;AAepD,MAIaC,cAAc;EAEvBC,YAAqBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAIzB,KAAAC,YAAY,GAAe,EAC1B;EAHD;EAKAC,cAAcA,CAAA;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,uCAAuC,CAAC;EAC7E;EAEAC,gBAAgBA,CAACC,GAAW;IACxB,MAAMC,GAAG,GAAG,kDAAkDD,GAAG,EAAE;IACnE,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAWG,GAAG,CAAC;EACvC;EAEAC,cAAcA,CAACC,EAAS;IACpB,MAAMF,GAAG,GAAE,4CAA4CE,EAAE,EAAE;IAC3D,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAaG,GAAG,CAAC;EACzC;EAEAG,aAAaA,CAACC,QAAkB,EAAEC,iBAAgC;IAC9D,MAAML,GAAG,GAAG,uCAAuC;IACnD,MAAMM,KAAK,GAAG,IAAI,CAACV,cAAc,CAACW,MAAM,GAAE,CAAC;IAE1C;IACP,MAAMC,YAAY,GAAG;MACnB;MACAC,UAAU,EAAEL,QAAQ,CAACK,UAAU;MAC/BC,IAAI,EAAG,IAAI,CAACC,OAAO,CAACP,QAAQ,CAACK,UAAU,CAAC;MACxCG,SAAS,EAAER,QAAQ,CAACQ,SAAS;MAC7BC,KAAK,EAAET,QAAQ,CAACS,KAAK;MACrBC,SAAS,EAAET,iBAAiB;MAC5BH,EAAE,EAACI,KAAK,GAAC,CAAC;MACVS,MAAM,EAACX,QAAQ,CAACY;KACjB;IAED;IACA,MAAMC,YAAY,GAAG1B,EAAE,CAACiB,YAAY,CAAC;IAErC,OAAOS,YAAY;EACrB;EAEAN,OAAOA,CAACO,IAAY;IACZ,MAAMC,cAAc,GAAGD,IAAI,CAACE,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAACC,WAAW,EAAE;IACxE,MAAMX,IAAI,GAAGS,cAAc,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IAEhD,OAAOV,IAAI;EACb;;AAlDOlB,cAAc,C;mBAAdA,cAAc,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdjC,cAAc,C;SAAdA,cAAc;EAAAkC,OAAA,EAAdlC,cAAc,CAAAmC,IAAA;EAAAC,UAAA,EAHX;AAAM;SAGTpC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}