{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CategorieService {\n  constructor(http) {\n    this.http = http;\n    this.categoriesList = [];\n  }\n  // getAllCategories():Observable<Categories[]> {\n  //     return this.http.get<Categories[]>('https://diane.amorce.org/api/categories')\n  // }\n  getAllCategories() {\n    return this.http.get('https://diane.amorce.org/api/categories').pipe(map(categories => {\n      categories.forEach(category => {\n        category.subCategories = categories.filter(c => c.parentId === category.id);\n      });\n      return categories.filter(category => category.parentId === null);\n    }));\n  }\n  getCategorieById(id) {\n    const categorie = this.categoriesList.find(categorie => categorie.id === id);\n    if (!categorie) {\n      throw new Error('categorie not found');\n    }\n  }\n}\nCategorieService.ɵfac = function CategorieService_Factory(t) {\n  return new (t || CategorieService)(i0.ɵɵinject(i1.HttpClient));\n};\nCategorieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategorieService,\n  factory: CategorieService.ɵfac,\n  providedIn: 'root'\n});\nexport { CategorieService };","map":{"version":3,"names":["map","CategorieService","constructor","http","categoriesList","getAllCategories","get","pipe","categories","forEach","category","subCategories","filter","c","parentId","id","getCategorieById","categorie","find","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Maddox\\Documents\\TRAVAIL\\AFPA_CDA_2023\\ANGULAR\\WitchyDesktop\\src\\app\\services\\categories.services.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Categories } from \"../models/categories.model\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class CategorieService {\r\n\r\n    constructor( private http: HttpClient){\r\n\r\n    }\r\n\r\n    categoriesList: Categories[] = [\r\n\r\n\r\n    ];\r\n\r\n    // getAllCategories():Observable<Categories[]> {\r\n    //     return this.http.get<Categories[]>('https://diane.amorce.org/api/categories')\r\n    // }\r\n\r\n\r\n    getAllCategories(): Observable<Categories[]> {\r\n        return this.http.get<Categories[]>('https://diane.amorce.org/api/categories').pipe(\r\n          map((categories: Categories[]) => {\r\n            categories.forEach(category => {\r\n              category.subCategories = categories.filter(c => c.parentId === category.id);\r\n            });\r\n            return categories.filter(category => category.parentId === null);\r\n          })\r\n        );\r\n      }    \r\n\r\n    getCategorieById(id: number): void {\r\n        const categorie = this.categoriesList.find(categorie => categorie.id === id);\r\n        if (!categorie) {\r\n            throw new Error('categorie not found');\r\n        }\r\n\r\n        \r\n\r\n    }\r\n}"],"mappings":"AAIA,SAAiBA,GAAG,QAAQ,gBAAgB;;;AAE5C,MAIaC,gBAAgB;EAEzBC,YAAqBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAIzB,KAAAC,cAAc,GAAiB,EAG9B;EALD;EAOA;EACA;EACA;EAGAC,gBAAgBA,CAAA;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,yCAAyC,CAAC,CAACC,IAAI,CAChFP,GAAG,CAAEQ,UAAwB,IAAI;MAC/BA,UAAU,CAACC,OAAO,CAACC,QAAQ,IAAG;QAC5BA,QAAQ,CAACC,aAAa,GAAGH,UAAU,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,KAAKJ,QAAQ,CAACK,EAAE,CAAC;MAC7E,CAAC,CAAC;MACF,OAAOP,UAAU,CAACI,MAAM,CAACF,QAAQ,IAAIA,QAAQ,CAACI,QAAQ,KAAK,IAAI,CAAC;IAClE,CAAC,CAAC,CACH;EACH;EAEFE,gBAAgBA,CAACD,EAAU;IACvB,MAAME,SAAS,GAAG,IAAI,CAACb,cAAc,CAACc,IAAI,CAACD,SAAS,IAAIA,SAAS,CAACF,EAAE,KAAKA,EAAE,CAAC;IAC5E,IAAI,CAACE,SAAS,EAAE;MACZ,MAAM,IAAIE,KAAK,CAAC,qBAAqB,CAAC;;EAK9C;;AAnCSlB,gBAAgB,C;mBAAhBA,gBAAgB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhBtB,gBAAgB,C;SAAhBA,gBAAgB;EAAAuB,OAAA,EAAhBvB,gBAAgB,CAAAwB,IAAA;EAAAC,UAAA,EAHb;AAAM;SAGTzB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}