{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { map } from 'rxjs';\nlet NewProduitComponent = class NewProduitComponent {\n  constructor(produitService, route, categoryService, formBuilder) {\n    this.produitService = produitService;\n    this.route = route;\n    this.categoryService = categoryService;\n    this.formBuilder = formBuilder;\n    this.photosTab = [];\n  }\n  ngOnInit() {\n    this.createForm = this.formBuilder.group({\n      ShortLibel: [null],\n      LongLibel: [null],\n      prxHt: [null],\n      photos0: [null],\n      photos1: [null],\n      photos2: [null],\n      photos3: [null],\n      photos4: [null],\n      photos5: [null]\n    });\n    // Récupérez l'ID de la catégorie depuis le service\n    this.currentCategoryId = this.categoryService.getCurrentCategoryId();\n    this.produitPreview$ = this.createForm.valueChanges.pipe(map(formvalue => ({\n      ...formvalue,\n      slug: slugify(formvalue.ShortLibel),\n      categorie: this.currentCategoryId,\n      photos: this.photosTab\n    })));\n  }\n  onSubmitForm() {\n    console.log(this.createForm.value);\n  }\n  // deleteField(): void {\n  //   const inputValue = this.createForm.value.photos;\n  //   const index = this.photosTab.findIndex(photo => photo === inputValue);\n  //   if (index !== -1) {\n  //     this.photosTab.splice(index, 1);\n  //   }\n  // }\n  addField(event) {\n    const currentButton = event.target;\n    const currentId = currentButton.id;\n    const index = parseInt(currentId.slice(8));\n    const srcActuel = this.createForm.value[`photos${index}`];\n    if (srcActuel) {\n      this.photosTab.push(srcActuel);\n      console.log(this.photosTab);\n    }\n    if (index > 5) {\n      return; // Limite maximale atteinte, ne pas ajouter de nouvel champ\n    }\n\n    const newId = `photos${index + 1}`;\n    const nextElement = document.getElementById(newId);\n    if (nextElement) {\n      nextElement.classList.toggle('toggle');\n    }\n  }\n};\nNewProduitComponent = __decorate([Component({\n  selector: 'app-new-produit',\n  templateUrl: './new-produit.component.html',\n  styleUrls: ['./new-produit.component.scss']\n})], NewProduitComponent);\nexport { NewProduitComponent };\nfunction slugify(text) {\n  const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\n  const slug = normalizedText.replace(/\\s+/g, \"-\");\n  return slug;\n}","map":{"version":3,"names":["Component","map","NewProduitComponent","constructor","produitService","route","categoryService","formBuilder","photosTab","ngOnInit","createForm","group","ShortLibel","LongLibel","prxHt","photos0","photos1","photos2","photos3","photos4","photos5","currentCategoryId","getCurrentCategoryId","produitPreview$","valueChanges","pipe","formvalue","slug","slugify","categorie","photos","onSubmitForm","console","log","value","addField","event","currentButton","target","currentId","id","index","parseInt","slice","srcActuel","push","newId","nextElement","document","getElementById","classList","toggle","__decorate","selector","templateUrl","styleUrls","text","normalizedText","replace","toLowerCase"],"sources":["/home/diane/Documents/PROJET/WitchyDesktop/src/app/new-produit/new-produit.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ProduitService } from '../services/produits.services';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Observable, distinctUntilChanged, map } from 'rxjs';\nimport { Produits } from '../models/produits.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { CategorieService } from '../services/categories.services';\n\n@Component({\n  selector: 'app-new-produit',\n  templateUrl: './new-produit.component.html',\n  styleUrls: ['./new-produit.component.scss']\n})\nexport class NewProduitComponent implements OnInit{\n\n  createForm!:FormGroup;\n  produitPreview$!: Observable<Produits>;\n  currentCategoryId!: number | null;\n  photosTab: string[] = [];\n \n\n  constructor(private produitService: ProduitService,\n    private route : ActivatedRoute,\n    private categoryService: CategorieService,\n    private formBuilder: FormBuilder) {}\n\n    ngOnInit(): void {\n      this.createForm = this.formBuilder.group({\n        ShortLibel: [null],\n         LongLibel: [null],\n         prxHt: [null],\n         photos0:[null],\n         photos1:[null],\n         photos2:[null],\n         photos3:[null],\n         photos4:[null],\n         photos5:[null],\n      });\n\n    // Récupérez l'ID de la catégorie depuis le service\n    this.currentCategoryId = this.categoryService.getCurrentCategoryId();\n\n\n    this.produitPreview$ = this.createForm.valueChanges.pipe(\n     \n        map(formvalue => ({ \n          ...formvalue,\n          slug: slugify(formvalue.ShortLibel),\n          categorie: this.currentCategoryId,\n          photos:this.photosTab\n        }))\n      )\n    \n  }\n  onSubmitForm(): void {\n    console.log(this.createForm.value);\n}\n\n// deleteField(): void {\n//   const inputValue = this.createForm.value.photos;\n//   const index = this.photosTab.findIndex(photo => photo === inputValue);\n\n//   if (index !== -1) {\n//     this.photosTab.splice(index, 1);\n//   }\n// }\n\naddField(event: Event): void {\n  const currentButton = event.target as HTMLButtonElement;\n  const currentId = currentButton.id;\n  const index = parseInt(currentId.slice(8));\n  const srcActuel = this.createForm.value[`photos${index}`];\nif (srcActuel) {\n    this.photosTab.push(srcActuel);\n  \n  console.log(this.photosTab);\n}\n\n\n  if (index > 5) {\n    return; // Limite maximale atteinte, ne pas ajouter de nouvel champ\n  }\n\n  const newId = `photos${index + 1}`;\n  const nextElement = document.getElementById(newId);\n  if (nextElement) {\n    nextElement.classList.toggle('toggle');\n  }\n}\n\n}\n\nfunction slugify(text: string): string {\n\n  const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\n  const slug = normalizedText.replace(/\\s+/g, \"-\");\n\n  return slug;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}