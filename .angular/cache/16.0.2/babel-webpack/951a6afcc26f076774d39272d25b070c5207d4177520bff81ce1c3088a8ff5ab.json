{"ast":null,"code":"import { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ProduitService {\n  constructor(http) {\n    this.http = http;\n    this.produitsList = [];\n  }\n  getAllProduits() {\n    return this.http.get(\"https://diane.amorce.org/api/produits\");\n  }\n  getAllPhotoByRef(ref) {\n    const url = `https://diane.amorce.org/api/photos?RefProduit=${ref}`;\n    return this.http.get(url);\n  }\n  getProduitById(id) {\n    const url = `https://diane.amorce.org/api/produits?id=${id}`;\n    return this.http.get(url);\n  }\n  createProduit(formData, currentCategoryId, photosTab) {\n    const url = \"https://diane.amorce.org/api/produits\";\n    console.log(nbrId);\n    // Effectuez les modifications nécessaires sur formData ici\n    const modifiedData = {\n      // Exemple : ne conservez que les propriétés nécessaires\n      ShortLibel: formData.ShortLibel,\n      slug: this.slugify(formData.ShortLibel),\n      LongLibel: formData.LongLibel,\n      prxHt: formData.prxHt,\n      categorie: currentCategoryId !== null ? currentCategoryId.toString() : \"\",\n      photos: photosTab\n    };\n    // Créez un nouvel observable à partir du tableau modifié\n    const productInfos = of(modifiedData);\n    return productInfos;\n  }\n  slugify(text) {\n    const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\n    const slug = normalizedText.replace(/\\s+/g, \"-\");\n    return slug;\n  }\n}\nProduitService.ɵfac = function ProduitService_Factory(t) {\n  return new (t || ProduitService)(i0.ɵɵinject(i1.HttpClient));\n};\nProduitService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProduitService,\n  factory: ProduitService.ɵfac,\n  providedIn: \"root\"\n});\nexport { ProduitService };","map":{"version":3,"names":["of","ProduitService","constructor","http","produitsList","getAllProduits","get","getAllPhotoByRef","ref","url","getProduitById","id","createProduit","formData","currentCategoryId","photosTab","console","log","nbrId","modifiedData","ShortLibel","slug","slugify","LongLibel","prxHt","categorie","toString","photos","productInfos","text","normalizedText","replace","toLowerCase","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/diane/Documents/PROJET/WitchyDesktop/src/app/services/produits.services.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable, forkJoin, map, of } from \"rxjs\";\nimport { Produits } from \"../models/produits.model\";\nimport { Photos } from \"../models/photos.model\";\n\ninterface FormData {\n  ShortLibel: string;\n  LongLibel: string;\n  prxHt: number;\n  photos0: any[];\n  // Ajoutez les autres propriétés du formulaire ici\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProduitService {\n  constructor(private http: HttpClient) {}\n\n  produitsList: Produits[] = [];\n\n  getAllProduits(): Observable<Produits[]> {\n    return this.http.get<Produits[]>(\"https://diane.amorce.org/api/produits\");\n  }\n\n  getAllPhotoByRef(ref: number): Observable<Photos[]> {\n    const url = `https://diane.amorce.org/api/photos?RefProduit=${ref}`;\n    return this.http.get<Photos[]>(url);\n  }\n\n  getProduitById(id: number): Observable<Produits[]> {\n    const url = `https://diane.amorce.org/api/produits?id=${id}`;\n    return this.http.get<Produits[]>(url);\n  }\n  \n\n  createProduit( formData: FormData, currentCategoryId: number | null ,photosTab: string[]): Observable<Produits> {\n    const url = \"https://diane.amorce.org/api/produits\";\n    \n    console.log(nbrId);\n    // Effectuez les modifications nécessaires sur formData ici\n    const modifiedData = {\n      // Exemple : ne conservez que les propriétés nécessaires\n      ShortLibel: formData.ShortLibel,\n      slug: this.slugify(formData.ShortLibel),\n      LongLibel: formData.LongLibel,\n      prxHt: formData.prxHt,\n      categorie: currentCategoryId !== null ? currentCategoryId.toString() : \"\",\n      photos: photosTab,\n    };\n\n    // Créez un nouvel observable à partir du tableau modifié\n    const productInfos = of(modifiedData);\n\n    return productInfos;\n  }\n\n  slugify(text: string): string {\n    const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\n    const slug = normalizedText.replace(/\\s+/g, \"-\");\n\n    return slug;\n  }\n\n\n}\n"],"mappings":"AAEA,SAAoCA,EAAE,QAAQ,MAAM;;;AAYpD,MAGaC,cAAc;EACzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAExB,KAAAC,YAAY,GAAe,EAAE;EAFU;EAIvCC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,uCAAuC,CAAC;EAC3E;EAEAC,gBAAgBA,CAACC,GAAW;IAC1B,MAAMC,GAAG,GAAG,kDAAkDD,GAAG,EAAE;IACnE,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAWG,GAAG,CAAC;EACrC;EAEAC,cAAcA,CAACC,EAAU;IACvB,MAAMF,GAAG,GAAG,4CAA4CE,EAAE,EAAE;IAC5D,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAaG,GAAG,CAAC;EACvC;EAGAG,aAAaA,CAAEC,QAAkB,EAAEC,iBAAgC,EAAEC,SAAmB;IACtF,MAAMN,GAAG,GAAG,uCAAuC;IAEnDO,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IAClB;IACA,MAAMC,YAAY,GAAG;MACnB;MACAC,UAAU,EAAEP,QAAQ,CAACO,UAAU;MAC/BC,IAAI,EAAE,IAAI,CAACC,OAAO,CAACT,QAAQ,CAACO,UAAU,CAAC;MACvCG,SAAS,EAAEV,QAAQ,CAACU,SAAS;MAC7BC,KAAK,EAAEX,QAAQ,CAACW,KAAK;MACrBC,SAAS,EAAEX,iBAAiB,KAAK,IAAI,GAAGA,iBAAiB,CAACY,QAAQ,EAAE,GAAG,EAAE;MACzEC,MAAM,EAAEZ;KACT;IAED;IACA,MAAMa,YAAY,GAAG5B,EAAE,CAACmB,YAAY,CAAC;IAErC,OAAOS,YAAY;EACrB;EAEAN,OAAOA,CAACO,IAAY;IAClB,MAAMC,cAAc,GAAGD,IAAI,CAACE,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAACC,WAAW,EAAE;IACxE,MAAMX,IAAI,GAAGS,cAAc,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IAEhD,OAAOV,IAAI;EACb;;AA9CWpB,cAAc,C;mBAAdA,cAAc,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdnC,cAAc,C;SAAdA,cAAc;EAAAoC,OAAA,EAAdpC,cAAc,CAAAqC,IAAA;EAAAC,UAAA,EAFb;AAAM;SAEPtC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}