{"ast":null,"code":"import { forkJoin, map, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ProduitService {\n  constructor(http) {\n    this.http = http;\n    this.produitsList = [];\n  }\n  getAllProduits() {\n    return this.http.get(\"https://diane.amorce.org/api/produits\");\n  }\n  getAllPhotos() {\n    return this.http.get(\"https://diane.amorce.org/api/photos\");\n  }\n  getAllPhotoByRef(ref) {\n    const url = `https://diane.amorce.org/api/photos?RefProduit=${ref}`;\n    return this.http.get(url);\n  }\n  getProduitById(id) {\n    const url = `https://diane.amorce.org/api/produits?id=${id}`;\n    return this.http.get(url);\n  }\n  getMaxProduitId() {\n    return this.getAllProduits().pipe(map(produits => [...produits].sort((a, b) => a.id - b.id)), map(sortedProduits => sortedProduits[sortedProduits.length - 1].id));\n  }\n  getMaxPhotoId() {\n    return this.getAllPhotos().pipe(map(photos => [...photos].sort((a, b) => a.id - b.id)), map(sortedPhotos => sortedPhotos[sortedPhotos.length - 1].id));\n  }\n  createProduit(formvalue, currentCategoryId) {\n    return this.getAllProduits().pipe(map(produits => [...produits].sort((a, b) => a.id - b.id)), map(sortedproduits => sortedproduits[sortedproduits.length - 1]), map(previousproduit => ({\n      ...formvalue,\n      slug: this.slugify(formvalue.ShortLibel),\n      categorie: `/api/categories/${currentCategoryId?.toString()}`\n    })), switchMap(newproduit => this.http.post('https://diane.amorce.org/api/produits', newproduit)));\n  }\n  addPhoto(formvalue) {\n    return forkJoin({\n      maxProduitId: this.getMaxProduitId(),\n      maxPhotoId: this.getMaxPhotoId()\n    }).pipe(switchMap(({\n      maxProduitId,\n      maxPhotoId\n    }) => {\n      const photos = [];\n      for (const key in formvalue) {\n        if (formvalue[key]) {\n          console.log(`Key: ${key}`);\n          console.log(`Value: ${formvalue[key]}`);\n          const photo = {\n            id: 0,\n            src: formvalue[key]?.toString(),\n            isPrimary: key === 'photos0' ? true : false,\n            RefProduit: maxProduitId?.toString()\n          };\n          console.log(photo);\n          photos.push(photo);\n        }\n      }\n      return this.http.post('https://diane.amorce.org/api/post_photos', photos);\n    }));\n  }\n  slugify(text) {\n    const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\n    const slug = normalizedText.replace(/\\s+/g, \"-\");\n    return slug;\n  }\n}\nProduitService.ɵfac = function ProduitService_Factory(t) {\n  return new (t || ProduitService)(i0.ɵɵinject(i1.HttpClient));\n};\nProduitService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProduitService,\n  factory: ProduitService.ɵfac,\n  providedIn: \"root\"\n});\nexport { ProduitService };","map":{"version":3,"names":["forkJoin","map","switchMap","ProduitService","constructor","http","produitsList","getAllProduits","get","getAllPhotos","getAllPhotoByRef","ref","url","getProduitById","id","getMaxProduitId","pipe","produits","sort","a","b","sortedProduits","length","getMaxPhotoId","photos","sortedPhotos","createProduit","formvalue","currentCategoryId","sortedproduits","previousproduit","slug","slugify","ShortLibel","categorie","toString","newproduit","post","addPhoto","maxProduitId","maxPhotoId","key","console","log","photo","src","isPrimary","RefProduit","push","text","normalizedText","replace","toLowerCase","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/diane/Documents/PROJET/WitchyDesktop/src/app/services/produits.services.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable, forkJoin, map, of, switchMap } from \"rxjs\";\nimport { Produits } from \"../models/produits.model\";\nimport { Photos } from \"../models/photos.model\";\n\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProduitService {\n  constructor(private http: HttpClient) {}\n\n  produitsList: Produits[] = [];\n\n  getAllProduits(): Observable<Produits[]> {\n    return this.http.get<Produits[]>(\"https://diane.amorce.org/api/produits\");\n  }\n\n  getAllPhotos(): Observable<Photos[]> {\n    return this.http.get<Photos[]>(\"https://diane.amorce.org/api/photos\");\n  }\n\n  getAllPhotoByRef(ref: number): Observable<Photos[]> {\n    const url = `https://diane.amorce.org/api/photos?RefProduit=${ref}`;\n    return this.http.get<Photos[]>(url);\n  }\n\n  getProduitById(id: number): Observable<Produits[]> {\n    const url = `https://diane.amorce.org/api/produits?id=${id}`;\n    return this.http.get<Produits[]>(url);\n  }\n  \n  private getMaxProduitId(): Observable<number> {\n    return this.getAllProduits().pipe(\n      map(produits => [...produits].sort((a, b) => a.id - b.id)),\n      map(sortedProduits => sortedProduits[sortedProduits.length - 1].id),\n    );\n  }\n  \n  private getMaxPhotoId(): Observable<number> {\n    return this.getAllPhotos().pipe(\n      map(photos => [...photos].sort((a, b) => a.id - b.id)),\n      map(sortedPhotos => sortedPhotos[sortedPhotos.length - 1].id),\n    );\n  }\n\n\n  public createProduit( formvalue: {ShortLibel: string, LongLibel: string, prxHt: number,  }, currentCategoryId: number | null): Observable<Produits> {\n   \n    return this.getAllProduits().pipe(\n        map(produits => [...produits].sort((a, b)=>a.id - b.id)),\n        map(sortedproduits => sortedproduits[sortedproduits.length - 1]),\n        map(previousproduit => ({\n            ...formvalue,\n            slug: this.slugify(formvalue.ShortLibel),\n            categorie: `/api/categories/${currentCategoryId?.toString()}`,\n        })),\n        switchMap(newproduit => this.http.post<Produits>('https://diane.amorce.org/api/produits', newproduit)),\n    )\n  }\n\n  public addPhoto(formvalue: { [key: string]: string | null }): Observable<Photos[]> {\n    return forkJoin({\n      maxProduitId: this.getMaxProduitId(),\n      maxPhotoId: this.getMaxPhotoId(),\n    }).pipe(\n      switchMap(({ maxProduitId, maxPhotoId }) => {\n        const photos: Partial<Photos>[] = [];\n  \n        for (const key in formvalue) {\n          if (formvalue[key]) {\n            console.log(`Key: ${key}`);\n            console.log(`Value: ${formvalue[key]}`);\n  \n            const photo: Partial<Photos> = {\n              id: 0,\n              src: formvalue[key]?.toString(),\n              isPrimary: key === 'photos0' ? true : false,\n              RefProduit: maxProduitId?.toString()\n            };\n            console.log(photo);\n            photos.push(photo);\n          }\n        }\n  \n        return this.http.post<Photos[]>('https://diane.amorce.org/api/post_photos', photos);\n      })\n    );\n  }\n\n  slugify(text: string): string {\n    const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\n    const slug = normalizedText.replace(/\\s+/g, \"-\");\n\n    return slug;\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}