{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { map } from 'rxjs';\nlet NewProduitComponent = class NewProduitComponent {\n  constructor(produitService, route, categoryService, formBuilder) {\n    this.produitService = produitService;\n    this.route = route;\n    this.categoryService = categoryService;\n    this.formBuilder = formBuilder;\n    this.photosTab = [];\n    this.photo2 = false;\n  }\n  ngOnInit() {\n    this.createForm = this.formBuilder.group({\n      ShortLibel: [null],\n      LongLibel: [null],\n      prxHt: [null],\n      photos: [null],\n      photos1: [null],\n      photos2: [null],\n      photos3: [null],\n      photos4: [null],\n      photos5: [null]\n    });\n    // Récupérez l'ID de la catégorie depuis le service\n    this.currentCategoryId = this.categoryService.getCurrentCategoryId();\n    this.produitPreview$ = this.createForm.valueChanges.pipe(map(formvalue => ({\n      ...formvalue,\n      slug: slugify(formvalue.ShortLibel),\n      categorie: this.currentCategoryId\n    })));\n  }\n  onSubmitForm() {\n    console.log(this.createForm.value);\n  }\n  // deleteField(): void {\n  //   const inputValue = this.createForm.value.photos;\n  //   const index = this.photosTab.findIndex(photo => photo === inputValue);\n  //   if (index !== -1) {\n  //     this.photosTab.splice(index, 1);\n  //   }\n  // }\n  addField() {\n    const currentId = this.createForm.value.photos;\n    console.log(currentId);\n    const index = parseInt(currentId.slice(6)); // Récupérer le numéro après \"photos\"\n    if (index >= 5) {\n      return; // Limite maximale atteinte, ne pas ajouter de nouvel champ\n    }\n\n    const newId = `photos${index + 1}`;\n    const nextElement = document.getElementById(newId);\n    if (nextElement) {\n      nextElement.classList.toggle('toggle');\n    }\n  }\n  addPhoto() {\n    this.photo2 = true;\n  }\n};\nNewProduitComponent = __decorate([Component({\n  selector: 'app-new-produit',\n  templateUrl: './new-produit.component.html',\n  styleUrls: ['./new-produit.component.scss']\n})], NewProduitComponent);\nexport { NewProduitComponent };\nfunction slugify(text) {\n  const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\n  const slug = normalizedText.replace(/\\s+/g, \"-\");\n  return slug;\n}","map":{"version":3,"names":["Component","map","NewProduitComponent","constructor","produitService","route","categoryService","formBuilder","photosTab","photo2","ngOnInit","createForm","group","ShortLibel","LongLibel","prxHt","photos","photos1","photos2","photos3","photos4","photos5","currentCategoryId","getCurrentCategoryId","produitPreview$","valueChanges","pipe","formvalue","slug","slugify","categorie","onSubmitForm","console","log","value","addField","currentId","index","parseInt","slice","newId","nextElement","document","getElementById","classList","toggle","addPhoto","__decorate","selector","templateUrl","styleUrls","text","normalizedText","replace","toLowerCase"],"sources":["C:\\Users\\Maddox\\Documents\\TRAVAIL\\AFPA_CDA_2023\\ANGULAR\\WitchyDesktop\\src\\app\\new-produit\\new-produit.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ProduitService } from '../services/produits.services';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Observable, distinctUntilChanged, map } from 'rxjs';\r\nimport { Produits } from '../models/produits.model';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CategorieService } from '../services/categories.services';\r\n\r\n@Component({\r\n  selector: 'app-new-produit',\r\n  templateUrl: './new-produit.component.html',\r\n  styleUrls: ['./new-produit.component.scss']\r\n})\r\nexport class NewProduitComponent implements OnInit{\r\n\r\n  createForm!:FormGroup;\r\n  produitPreview$!: Observable<Produits>;\r\n  currentCategoryId!: number | null;\r\n  photosTab: string[] = [];\r\n  photo2: boolean = false\r\n\r\n  constructor(private produitService: ProduitService,\r\n    private route : ActivatedRoute,\r\n    private categoryService: CategorieService,\r\n    private formBuilder: FormBuilder) {}\r\n\r\n    ngOnInit(): void {\r\n      this.createForm = this.formBuilder.group({\r\n        ShortLibel: [null],\r\n         LongLibel: [null],\r\n         prxHt: [null],\r\n         photos:[null],\r\n         photos1:[null],\r\n         photos2:[null],\r\n         photos3:[null],\r\n         photos4:[null],\r\n         photos5:[null],\r\n      });\r\n\r\n    // Récupérez l'ID de la catégorie depuis le service\r\n    this.currentCategoryId = this.categoryService.getCurrentCategoryId();\r\n\r\n\r\n    this.produitPreview$ = this.createForm.valueChanges.pipe(\r\n     \r\n        map(formvalue => ({ \r\n          ...formvalue,\r\n          slug: slugify(formvalue.ShortLibel),\r\n          categorie: this.currentCategoryId,\r\n        }))\r\n      )\r\n    \r\n  }\r\n  onSubmitForm(): void {\r\n    console.log(this.createForm.value);\r\n}\r\n\r\n// deleteField(): void {\r\n//   const inputValue = this.createForm.value.photos;\r\n//   const index = this.photosTab.findIndex(photo => photo === inputValue);\r\n\r\n//   if (index !== -1) {\r\n//     this.photosTab.splice(index, 1);\r\n//   }\r\n// }\r\n\r\naddField(): void {\r\n  const currentId = this.createForm.value.photos;\r\n  console.log(currentId);\r\n  const index = parseInt(currentId.slice(6)); // Récupérer le numéro après \"photos\"\r\n  if (index >= 5) {\r\n    return; // Limite maximale atteinte, ne pas ajouter de nouvel champ\r\n  }\r\n\r\n  const newId = `photos${index + 1}`;\r\n  const nextElement = document.getElementById(newId);\r\n  if (nextElement) {\r\n    nextElement.classList.toggle('toggle');\r\n  }\r\n}\r\n\r\naddPhoto() {\r\n  this.photo2 = true\r\n}\r\n\r\n}\r\n\r\nfunction slugify(text: string): string {\r\n\r\n  const normalizedText = text.replace(/[^a-zA-Z0-9\\s]/g, \"\").toLowerCase();\r\n  const slug = normalizedText.replace(/\\s+/g, \"-\");\r\n\r\n  return slug;\r\n}\r\n\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAA2CC,GAAG,QAAQ,MAAM;AAU5D,IAAaC,mBAAmB,GAAhC,MAAaA,mBAAmB;EAQ9BC,YAAoBC,cAA8B,EACxCC,KAAsB,EACtBC,eAAiC,EACjCC,WAAwB;IAHd,KAAAH,cAAc,GAAdA,cAAc;IACxB,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,eAAe,GAAfA,eAAe;IACf,KAAAC,WAAW,GAAXA,WAAW;IANrB,KAAAC,SAAS,GAAa,EAAE;IACxB,KAAAC,MAAM,GAAY,KAAK;EAKc;EAEnCC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACvCC,UAAU,EAAE,CAAC,IAAI,CAAC;MACjBC,SAAS,EAAE,CAAC,IAAI,CAAC;MACjBC,KAAK,EAAE,CAAC,IAAI,CAAC;MACbC,MAAM,EAAC,CAAC,IAAI,CAAC;MACbC,OAAO,EAAC,CAAC,IAAI,CAAC;MACdC,OAAO,EAAC,CAAC,IAAI,CAAC;MACdC,OAAO,EAAC,CAAC,IAAI,CAAC;MACdC,OAAO,EAAC,CAAC,IAAI,CAAC;MACdC,OAAO,EAAC,CAAC,IAAI;KACf,CAAC;IAEJ;IACA,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAAChB,eAAe,CAACiB,oBAAoB,EAAE;IAGpE,IAAI,CAACC,eAAe,GAAG,IAAI,CAACb,UAAU,CAACc,YAAY,CAACC,IAAI,CAEpDzB,GAAG,CAAC0B,SAAS,KAAK;MAChB,GAAGA,SAAS;MACZC,IAAI,EAAEC,OAAO,CAACF,SAAS,CAACd,UAAU,CAAC;MACnCiB,SAAS,EAAE,IAAI,CAACR;KACjB,CAAC,CAAC,CACJ;EAEL;EACAS,YAAYA,CAAA;IACVC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACtB,UAAU,CAACuB,KAAK,CAAC;EACtC;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEAC,QAAQA,CAAA;IACN,MAAMC,SAAS,GAAG,IAAI,CAACzB,UAAU,CAACuB,KAAK,CAAClB,MAAM;IAC9CgB,OAAO,CAACC,GAAG,CAACG,SAAS,CAAC;IACtB,MAAMC,KAAK,GAAGC,QAAQ,CAACF,SAAS,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAIF,KAAK,IAAI,CAAC,EAAE;MACd,OAAO,CAAC;;;IAGV,MAAMG,KAAK,GAAG,SAASH,KAAK,GAAG,CAAC,EAAE;IAClC,MAAMI,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAACH,KAAK,CAAC;IAClD,IAAIC,WAAW,EAAE;MACfA,WAAW,CAACG,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;;EAE1C;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACrC,MAAM,GAAG,IAAI;EACpB;CAEC;AAxEYP,mBAAmB,GAAA6C,UAAA,EAL/B/C,SAAS,CAAC;EACTgD,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWhD,mBAAmB,CAwE/B;SAxEYA,mBAAmB;AA0EhC,SAAS2B,OAAOA,CAACsB,IAAY;EAE3B,MAAMC,cAAc,GAAGD,IAAI,CAACE,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAACC,WAAW,EAAE;EACxE,MAAM1B,IAAI,GAAGwB,cAAc,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;EAEhD,OAAOzB,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}